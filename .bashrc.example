# OLLAMA MCP SERVER - CONFIGURACI√ìN OPTIMIZADA
# =============================================
# Configuraci√≥n completa para usar Ollama MCP Server desde cualquier directorio
# NOTA: Ajusta la variable MCP_HOME seg√∫n donde clones el repositorio

# Configuraci√≥n de ubicaci√≥n (personalizar seg√∫n tu instalaci√≥n)
export MCP_HOME="$HOME/mcp-servers"  # Cambiar si instalaste en otra ubicaci√≥n

# Funci√≥n principal MCP
mcp() {
    case "$1" in
        start|server)
            echo "üöÄ Iniciando Ollama MCP Server..."
            cd "$MCP_HOME" && .venv/bin/python3 ollama_mcp_server.py
            ;;
        install|setup)
            echo "üì¶ Ejecutando instalaci√≥n/configuraci√≥n..."
            cd "$MCP_HOME" && python install.py
            ;;
        models)
            echo "ü§ñ Modelos de Ollama instalados:"
            ollama list
            ;;
        pull)
            if [ -z "$2" ]; then
                echo "Uso: mcp pull <modelo>"
                echo "Ejemplos:"
                echo "  mcp pull deepseek-coder:6.7b"
                echo "  mcp pull qwen2.5-coder:7b"
                echo "  mcp pull llama3.2:3b"
            else
                echo "üì• Instalando modelo: $2"
                ollama pull "$2"
            fi
            ;;
        status)
            echo "üìä Estado del sistema:"
            echo "Ollama: $(ollama list | wc -l) modelos instalados"
            echo "MCP Server: $MCP_HOME/"
            echo "Config: $([ -f $MCP_HOME/.env ] && echo '‚úÖ Configurado' || echo '‚ùå Falta .env')"
            ;;
        # Comandos directos de agente (sin servidor interactivo)
        chat)
            shift
            echo "üí¨ Chat con Ollama..."
            $MCP_HOME/.venv/bin/python3 $MCP_HOME/mcp_direct.py chat "$@"
            ;;
        code)
            shift
            echo "üíª Asistencia de c√≥digo..."
            $MCP_HOME/.venv/bin/python3 $MCP_HOME/mcp_direct.py code "$@"
            ;;
        github)
            shift
            echo "üìÅ Consultando GitHub..."
            $MCP_HOME/.venv/bin/python3 $MCP_HOME/mcp_direct.py github_search "$@"
            ;;
        help|*)
            echo "ü§ñ Ollama MCP Server - Sistema integrado de IA"
            echo ""
            echo "üìä COMANDOS INTERACTIVOS:"
            echo "  mcp start    - Iniciar servidor MCP interactivo"
            echo ""
            echo "üöÄ COMANDOS DIRECTOS (desde cualquier proyecto):"
            echo "  mcp chat <mensaje>     - Chat directo con Ollama"
            echo "  mcp code <consulta>    - Asistencia de c√≥digo directa"
            echo "  mcp github <b√∫squeda>  - Buscar en GitHub directamente"
            echo ""
            echo "‚öôÔ∏è COMANDOS DE SISTEMA:"
            echo "  mcp models   - Ver modelos de Ollama instalados"
            echo "  mcp pull     - Instalar nuevo modelo"
            echo "  mcp install  - Reinstalar/configurar sistema"
            echo "  mcp status   - Ver estado del sistema"
            echo ""
            echo "üí° EJEMPLOS DE USO DIRECTO:"
            echo "  mcp chat '¬øC√≥mo optimizar este c√≥digo Python?'"
            echo "  mcp code 'Crear una API REST con FastAPI'"
            echo "  mcp github 'machine learning python'"
            echo ""
            echo "Ubicaci√≥n: $MCP_HOME/"
            ;;
    esac
}

# Aliases de compatibilidad
alias mcp-server='mcp start'
alias mcp-models='mcp models'
alias mcp-status='mcp status'

# Aliases directos para uso r√°pido desde proyectos
alias ai-chat='mcp chat'
alias ai-code='mcp code'
alias ai-github='mcp github'
            shift
            echo "üìÅ Consultando GitHub..."
            $MCP_HOME/.venv/bin/python3 $MCP_HOME/mcp_direct.py github_search "$@"
            ;;
        help)
            echo "ü§ñ Ollama MCP Server - Comandos disponibles:"
            echo ""
            echo "SERVIDOR INTERACTIVO:"
            echo "  mcp start          - Iniciar servidor interactivo"
            echo ""
            echo "COMANDOS DIRECTOS (AGENTE):"
            echo "  mcp chat <mensaje> - Chat directo con Llama"
            echo "  mcp code <consulta>- Asistencia de c√≥digo"
            echo "  mcp github <busq>  - Buscar en GitHub"
            echo ""
            echo "GESTI√ìN DEL SISTEMA:"
            echo "  mcp models         - Ver modelos instalados"
            echo "  mcp pull <modelo>  - Instalar nuevo modelo"
            echo "  mcp status         - Estado del sistema"
            echo "  mcp install        - Reinstalar/configurar"
            echo ""
            echo "ALIASES R√ÅPIDOS:"
            echo "  ai-chat, ai-code, ai-github"
            echo "  analyze <archivo>, review <archivo>"
            ;;
        *)
            echo "‚ùå Comando no reconocido: $1"
            echo "Usa: mcp help"
            ;;
    esac
}

# Funci√≥n para an√°lisis r√°pido de archivos
analyze() {
    if [ -f "$1" ]; then
        echo "üîç Analizando archivo: $1"
        $MCP_HOME/.venv/bin/python3 $MCP_HOME/mcp_direct.py code "Analiza este c√≥digo y dame sugerencias de mejora: $(cat "$1")"
    else
        echo "‚ùå Archivo no encontrado: $1"
        echo "Uso: analyze <archivo>"
    fi
}

# Funci√≥n para revisi√≥n de c√≥digo
review() {
    if [ -f "$1" ]; then
        echo "üîé Revisando c√≥digo: $1"
        $MCP_HOME/.venv/bin/python3 $MCP_HOME/mcp_direct.py code "Haz una revisi√≥n de c√≥digo detallada de este archivo, incluye bugs, mejores pr√°cticas y optimizaciones: $(cat "$1")"
    else
        echo "‚ùå Archivo no encontrado: $1"
        echo "Uso: review <archivo>"
    fi
}

# Aliases para comandos m√°s cortos
alias ai-chat='mcp chat'
alias ai-code='mcp code'
alias ai-github='mcp github'

# Funci√≥n de ayuda r√°pida
mcp-help() {
    echo "üöÄ OLLAMA MCP SERVER - Gu√≠a r√°pida"
    echo ""
    echo "DESDE CUALQUIER DIRECTORIO:"
    echo "  mcp chat 'Hola, ¬øc√≥mo est√°s?'"
    echo "  mcp code 'Crear una API REST con FastAPI'"
    echo "  mcp github 'python machine learning'"
    echo "  analyze mi_script.py"
    echo "  review src/app.js"
    echo ""
    echo "SERVIDOR INTERACTIVO:"
    echo "  mcp start  # Inicia el servidor interactivo"
    echo ""
    echo "Para ver todos los comandos: mcp help"
}

# Auto-completado para mcp
_mcp_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="start server install setup models pull status chat code github help"
    
    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _mcp_completion mcp

echo "‚úÖ Ollama MCP Server configurado. Usa 'mcp help' o 'mcp-help' para comenzar."
