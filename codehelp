#!/usr/bin/env python3
"""
üíª CODEHELP - Asistente de c√≥digo desde terminal
Uso: codehelp "problema de c√≥digo" o codehelp --fix "error"
"""

import os
import sys
import requests
import time
from dotenv import load_dotenv

load_dotenv()

def code_help(query: str, is_fix: bool = False) -> str:
    api_key = os.getenv('GROQ_API_KEY')
    if not api_key:
        return "‚ùå Configura GROQ_API_KEY en .env"
    
    if is_fix:
        system = "Eres un experto solucionando errores de c√≥digo. Da la soluci√≥n directa y pr√°ctica."
        prompt = f"Problema/Error: {query}\n\nSoluci√≥n:"
    else:
        system = "Eres un experto programador. Da c√≥digo funcional y explicaciones concisas."
        prompt = query
    
    try:
        start_time = time.time()
        
        response = requests.post(
            'https://api.groq.com/openai/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'llama-3.1-8b-instant',
                'messages': [
                    {'role': 'system', 'content': system},
                    {'role': 'user', 'content': prompt}
                ],
                'max_tokens': 800,
                'temperature': 0.3
            },
            timeout=15
        )
        
        duration = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            icon = "üîß" if is_fix else "üíª"
            speed = "‚ö°" if duration < 2 else "üî•"
            print(f"{icon} {speed} {duration:.1f}s\n{content}")
        else:
            print(f"‚ùå Error: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("üíª CODE - Asistente de programaci√≥n")
        print("Uso:")
        print("  code \"¬øC√≥mo hacer un loop en Python?\"")
        print("  code --fix \"ModuleNotFoundError: No module named 'requests'\"")
        sys.exit(1)
    
    is_fix = '--fix' in sys.argv
    if is_fix:
        sys.argv.remove('--fix')
    
    query = " ".join(sys.argv[1:])
    code_help(query, is_fix)
