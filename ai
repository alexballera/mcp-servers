#!/usr/bin/env python3
"""
ü§ñ AI Agent Terminal - Groq Ultra R√°pido
√ösalo desde cualquier lugar de la terminal
"""

import os
import sys
import requests
import time
import argparse
from dotenv import load_dotenv

# Cargar configuraci√≥n
script_dir = os.path.dirname(os.path.abspath(__file__))
env_path = os.path.join(script_dir, '.env')
load_dotenv(env_path)

class TerminalAI:
    def __init__(self):
        self.api_key = os.getenv('GROQ_API_KEY')
        self.base_url = "https://api.groq.com/openai/v1/chat/completions"
        self.model = "llama-3.1-8b-instant"
        
        if not self.api_key:
            print("‚ùå Error: GROQ_API_KEY no encontrada")
            print("üí° Configura tu API key:")
            print(f"   echo 'GROQ_API_KEY=tu_key' >> {env_path}")
            sys.exit(1)

    def chat(self, message, system_prompt=""):
        """Chat r√°pido con Groq"""
        try:
            start_time = time.time()
            
            messages = []
            if system_prompt:
                messages.append({"role": "system", "content": system_prompt})
            messages.append({"role": "user", "content": message})
            
            response = requests.post(
                self.base_url,
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": self.model,
                    "messages": messages,
                    "max_tokens": 1000,
                    "temperature": 0.7
                },
                timeout=10
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            if response.status_code == 200:
                result = response.json()
                content = result["choices"][0]["message"]["content"]
                
                print(f"ü§ñ AI ({duration:.1f}s):")
                print("-" * 50)
                print(content)
                print("-" * 50)
                return content
            else:
                print(f"‚ùå Error API: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
            return None

    def code_help(self, query):
        """Ayuda especializada de c√≥digo"""
        system = """Eres un experto programador. Da respuestas concisas y pr√°cticas.
        - Incluye c√≥digo funcional cuando sea relevante
        - Explica de forma clara y directa
        - M√°ximo 3 p√°rrafos"""
        
        return self.chat(query, system)

    def quick_fix(self, problem):
        """Soluci√≥n r√°pida a problemas"""
        system = """Eres un solucionador de problemas. Da respuestas directas y pr√°cticas.
        - Una soluci√≥n clara y espec√≠fica
        - Pasos concretos si es necesario
        - M√°ximo 2 p√°rrafos"""
        
        return self.chat(problem, system)

    def explain(self, concept):
        """Explicar conceptos t√©cnicos"""
        system = """Explica conceptos t√©cnicos de forma clara y pr√°ctica.
        - Definici√≥n simple
        - Ejemplo pr√°ctico
        - Casos de uso comunes"""
        
        return self.chat(f"Explica: {concept}", system)

def main():
    parser = argparse.ArgumentParser(description="ü§ñ AI Agent Terminal")
    parser.add_argument("command", nargs="?", help="Comando a ejecutar")
    parser.add_argument("text", nargs="*", help="Texto del mensaje")
    
    args = parser.parse_args()
    
    ai = TerminalAI()
    
    # Si no hay argumentos, modo interactivo
    if not args.command:
        print("ü§ñ AI Terminal Agent - Modo Interactivo")
        print("Comandos: chat, code, fix, explain, quit")
        print("-" * 50)
        
        while True:
            try:
                user_input = input("\nüí¨ Tu: ").strip()
                if not user_input or user_input.lower() in ['quit', 'exit', 'q']:
                    print("üëã ¬°Hasta luego!")
                    break
                
                ai.chat(user_input)
                
            except KeyboardInterrupt:
                print("\nüëã ¬°Hasta luego!")
                break
        return
    
    # Modo comando
    text = " ".join(args.text) if args.text else ""
    
    if not text:
        print(f"‚ùå Error: Falta texto para el comando '{args.command}'")
        print("üí° Uso: ai chat 'tu mensaje'")
        sys.exit(1)
    
    if args.command == "chat":
        ai.chat(text)
    elif args.command == "code":
        ai.code_help(text)
    elif args.command == "fix":
        ai.quick_fix(text)
    elif args.command == "explain":
        ai.explain(text)
    else:
        print(f"‚ùå Comando '{args.command}' no reconocido")
        print("üí° Comandos disponibles: chat, code, fix, explain")

if __name__ == "__main__":
    main()
